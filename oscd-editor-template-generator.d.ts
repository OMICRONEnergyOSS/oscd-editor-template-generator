import { LitElement } from 'lit';
import { TreeGrid, TreeSelection } from '@openenergytools/tree-grid';
import { MdFab } from '@scopedelement/material-web/fab/MdFab.js';
import { MdIcon } from '@scopedelement/material-web/icon/MdIcon.js';
import { MdFilledSelect } from '@scopedelement/material-web/select/MdFilledSelect.js';
import { MdSelectOption } from '@scopedelement/material-web/select/MdSelectOption.js';
import { MdFilledSelect as MdOutlinedSelect } from '@scopedelement/material-web/select/MdOutlineSelect.js';
import { MdOutlinedTextField } from '@scopedelement/material-web/textfield/MdOutlinedTextField.js';
import { MdOutlinedButton } from '@scopedelement/material-web/button/outlined-button.js';
import { MdDialog } from '@scopedelement/material-web/dialog/dialog.js';
import { Snackbar } from './components/snackbar.js';
import { CreateDataObjectDialog } from './components/create-do-dialog.js';
import { DescriptionDialog } from './components/description-dialog.js';
import { PreviewDialog } from './components/preview-dialog.js';
declare const TemplateGenerator_base: typeof LitElement & import("@open-wc/scoped-elements/lit-element.js").ScopedElementsHostConstructor;
export default class TemplateGenerator extends TemplateGenerator_base {
    static scopedElements: {
        'tree-grid': typeof TreeGrid;
        'md-filled-select': typeof MdFilledSelect;
        'md-select-option': typeof MdSelectOption;
        'md-outlined-select': typeof MdOutlinedSelect;
        'md-fab': typeof MdFab;
        'md-icon': typeof MdIcon;
        'md-outlined-button': typeof MdOutlinedButton;
        'md-dialog': typeof MdDialog;
        'md-outlined-text-field': typeof MdOutlinedTextField;
        'oscd-snackbar': typeof Snackbar;
        'create-data-object-dialog': typeof CreateDataObjectDialog;
        'description-dialog': typeof DescriptionDialog;
        'preview-dialog': typeof PreviewDialog;
    };
    doc?: XMLDocument;
    treeUI: TreeGrid;
    lNodeTypeUI?: MdFilledSelect;
    createDOdialog: CreateDataObjectDialog;
    descriptionDialog: DescriptionDialog;
    previewDialog: PreviewDialog;
    get selection(): TreeSelection;
    set selection(selection: TreeSelection);
    get filter(): string;
    set filter(filter: string);
    get lNodeType(): string;
    set lNodeType(lNodeType: string);
    addedLNode: string;
    snackbarMessage: string;
    snackbarType: 'success' | 'error';
    disconnectedCallback(): void;
    firstUpdated(): Promise<void>;
    saveTemplates(description: string): void;
    reset(): Promise<void>;
    private handleDOConfirm;
    private createDataObject;
    showNotification(message: string, type: 'success' | 'error'): void;
    private showPreview;
    private updateSelectionAtPath;
    private handleNodeSelected;
    private autoSelectEnums;
    render(): import("lit-html").TemplateResult<1>;
    static styles: import("lit").CSSResult;
}
export {};
